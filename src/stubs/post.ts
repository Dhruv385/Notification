// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.1
//   protoc               v3.21.12
// source: post.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "postNotification";

export interface TagNotificationRequest {
  userId: string;
  username: string;
  postId: string;
  TagedUserIds: string[];
}

export interface TagNotificationResponse {
  message: string;
  success: boolean;
}

export const POST_NOTIFICATION_PACKAGE_NAME = "postNotification";

export interface NotificationServiceClient {
  tagNotification(request: TagNotificationRequest, metadata?: Metadata): Observable<TagNotificationResponse>;
}

export interface NotificationServiceController {
  tagNotification(
    request: TagNotificationRequest,
    metadata?: Metadata,
  ): Promise<TagNotificationResponse> | Observable<TagNotificationResponse> | TagNotificationResponse;
}

export function NotificationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["tagNotification"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("NotificationService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("NotificationService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const NOTIFICATION_SERVICE_NAME = "NotificationService";
