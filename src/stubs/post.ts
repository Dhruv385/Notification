// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.1
//   protoc               v3.21.12
// source: post.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "post";

export interface SendPostNotificationRequest {
  userId: string;
  type: string;
  title: string;
  message: string;
  post: { [key: string]: string };
}

export interface SendPostNotificationRequest_PostEntry {
  key: string;
  value: string;
}

export interface SendPostNotificationResponse {
  success: boolean;
}

export const POST_PACKAGE_NAME = "post";

export interface NotificationServiceClient {
  sendPostNotification(
    request: SendPostNotificationRequest,
    metadata?: Metadata,
  ): Observable<SendPostNotificationResponse>;
}

export interface NotificationServiceController {
  sendPostNotification(
    request: SendPostNotificationRequest,
    metadata?: Metadata,
  ): Promise<SendPostNotificationResponse> | Observable<SendPostNotificationResponse> | SendPostNotificationResponse;
}

export function NotificationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["sendPostNotification"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("NotificationService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("NotificationService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const NOTIFICATION_SERVICE_NAME = "NotificationService";
