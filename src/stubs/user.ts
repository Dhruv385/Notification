// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.1
//   protoc               v3.21.12
// source: user.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "userNotification";

export interface CreateUserRequest {
  userId: string;
  userName: string;
}

export interface FollowRequest {
  userId: string;
  userName: string;
  targetId: string;
  type: boolean;
}

export interface UserResponse {
  message: string;
  status: string;
}

export interface TokenrRequest {
  type: string;
  userId: string;
}

export interface TokenrResponse {
  tokens: string[];
}

export const USER_NOTIFICATION_PACKAGE_NAME = "userNotification";

export interface UserServiceClient {
  createUserNotification(request: CreateUserRequest, metadata?: Metadata): Observable<UserResponse>;

  follow(request: FollowRequest, metadata?: Metadata): Observable<UserResponse>;
}

export interface UserServiceController {
  createUserNotification(
    request: CreateUserRequest,
    metadata?: Metadata,
  ): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  follow(request: FollowRequest, metadata?: Metadata): Promise<UserResponse> | Observable<UserResponse> | UserResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUserNotification", "follow"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
